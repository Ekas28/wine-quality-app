# -*- coding: utf-8 -*-
"""Wine Quality Prediction App

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1o3KZNdAG99lqVRMZiJx8Z9Do7PcMXKRj
"""

import streamlit as st
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt
import seaborn as sns

@st.cache_resource
def train_model_wine_quality():
    st.write("Loading Wine Quality dataset and training Machine Learning Model...")
    try:
        df = pd.read_csv("https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv", sep=';')
    except Exception as e:
        st.error(f"Error loading dataset: {e}. Please ensure you have an internet connection or specify a local path.")
        st.stop()

    target_column_name = 'quality'
    feature_names = [col for col in df.columns if col != target_column_name]

    if target_column_name not in df.columns:
        st.error(f"Error: Target column '{target_column_name}' not found in the dataset.")
        st.stop()

    X = df[feature_names]
    y = df[target_column_name]

    unique_qualities = sorted(y.unique().tolist())

    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, random_state=42, stratify=y
    )

    model = RandomForestClassifier(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)

    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    st.write(f"Model Training Complete! Accuracy on test set: {accuracy:.2f}")

    return model, feature_names, df, unique_qualities

model, feature_names, full_dataset_df, unique_qualities = train_model_wine_quality()

st.set_page_config(
    page_title="Wine Quality Prediction App",
    layout="centered",
    initial_sidebar_state="expanded"
)

st.title("🍷 Wine Quality Prediction App")
st.markdown("""
This application predicts the quality of red wine based on its physicochemical properties.
Input the properties using the sliders in the sidebar and get a quality prediction!
""")

st.sidebar.header("Wine Properties Input")

def get_user_input_wine():
    data = {}
    for feature in feature_names:
        data[feature] = st.sidebar.slider(
            f"{feature.replace('_', ' ').title()}",
            float(full_dataset_df[feature].min()),
            float(full_dataset_df[feature].max()),
            float(full_dataset_df[feature].mean())
        )
    return pd.DataFrame([data])

user_input_df = get_user_input_wine()

st.subheader("Your Input Wine Properties")
st.write(user_input_df)

st.subheader("Predicted Wine Quality")

if st.button("Predict Quality"):
    prediction = model.predict(user_input_df)
    prediction_proba = model.predict_proba(user_input_df)

    st.write(f"The model predicts the wine quality as: **{prediction[0]}**")

    proba_data = {
        'Quality Score': [str(q) for q in model.classes_],
        'Probability': prediction_proba[0]
    }
    proba_df = pd.DataFrame(proba_data)

    fig_proba, ax_proba = plt.subplots(figsize=(8, 5))
    sns.barplot(x='Quality Score', y='Probability', data=proba_df, ax=ax_proba, palette='viridis')
    ax_proba.set_title("Prediction Probabilities for Each Quality Score")
    ax_proba.set_xlabel("Wine Quality Score")
    ax_proba.set_ylabel("Probability")
    st.pyplot(fig_proba)
    st.markdown("This chart shows the model's confidence for each possible wine quality score.")

st.subheader("Model Insights & Data Visualization")

if hasattr(model, 'feature_importances_'):
    st.markdown("### Feature Importance")
    feature_importance_df = pd.DataFrame({
        'Feature': feature_names,
        'Importance': model.feature_importances_
    }).sort_values(by='Importance', ascending=False)

    fig_fi, ax_fi = plt.subplots(figsize=(10, 6))
    sns.barplot(x='Importance', y='Feature', data=feature_importance_df, ax=ax_fi, palette='magma')
    ax_fi.set_title("Feature Importance from Random Forest Model")
    st.pyplot(fig_fi)
    st.markdown("This chart indicates which wine properties the model considered most influential in predicting quality.")

st.markdown("### Sample Data Distribution (Pair Plot)")
st.write("A pair plot showing relationships between a few key wine properties from the training data, colored by quality.")

top_features_for_plot = feature_importance_df['Feature'].head(3).tolist()
pairplot_features = list(set(top_features_for_plot + ['quality']))

valid_pairplot_features = [f for f in pairplot_features if f in full_dataset_df.columns]

if len(valid_pairplot_features) >= 2 and 'quality' in valid_pairplot_features:
    plot_df = full_dataset_df[valid_pairplot_features].copy()
    plot_df['quality'] = plot_df['quality'].astype(str)

    fig_pairplot = sns.pairplot(plot_df, hue='quality', palette='coolwarm')
    st.pyplot(fig_pairplot)
elif len(valid_pairplot_features) >= 2:
     fig_pairplot = sns.pairplot(full_dataset_df[valid_pairplot_features], palette='coolwarm')
     st.pyplot(fig_pairplot)
else:
    st.write("Not enough features or missing 'quality' column to generate a meaningful pair plot.")

st.markdown("""
---
How to run this application:
1.  Save the code above as `app.py`.
2.  Open your terminal or command prompt.
3.  Navigate to the directory where you saved `app.py`.
4.  Run the command: `streamlit run app.py`
5.  Your web browser will automatically open to the Streamlit application.
""")